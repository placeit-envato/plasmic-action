"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.upsertStyleTokens = void 0;
const error_1 = require("../utils/error");
const file_utils_1 = require("../utils/file-utils");
function upsertStyleTokens(context, newStyleMap, projectId) {
    return __awaiter(this, void 0, void 0, function* () {
        const curStyleMap = yield readCurStyleMap(context);
        for (const prop of newStyleMap.props) {
            const index = curStyleMap.props.findIndex((p) => p.meta.id === prop.meta.id);
            if (index >= 0) {
                curStyleMap.props[index] = prop;
            }
            else {
                curStyleMap.props.push(prop);
            }
        }
        const allNewPropIds = new Set(newStyleMap.props.map((prop) => prop.meta.id));
        curStyleMap.props = curStyleMap.props.filter((prop) => {
            if (prop.meta.projectId !== projectId) {
                // Keep all tokens from other projects
                return true;
            }
            if (allNewPropIds.has(prop.meta.id)) {
                // Keep the current tokens in this project
                return true;
            }
            // Delete the tokens that have been removed from the project
            return false;
        });
        curStyleMap.props.sort((prop1, prop2) => prop1.name === prop2.name ? 0 : prop1.name < prop2.name ? -1 : 1);
        yield file_utils_1.writeFileContent(context, context.config.tokens.tokensFilePath, JSON.stringify(curStyleMap, undefined, 2), { force: true });
    });
}
exports.upsertStyleTokens = upsertStyleTokens;
function readCurStyleMap(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const filePath = context.config.tokens.tokensFilePath;
        if (file_utils_1.fileExists(context, filePath)) {
            try {
                return JSON.parse(file_utils_1.readFileContent(context, context.config.tokens.tokensFilePath));
            }
            catch (e) {
                throw new error_1.HandledError(`Error encountered reading ${context.config.tokens.tokensFilePath}: ${e}`);
            }
        }
        else {
            const defaultMap = {
                props: [],
                global: {
                    meta: {
                        source: "plasmic.app",
                    },
                },
            };
            yield file_utils_1.writeFileContent(context, context.config.tokens.tokensFilePath, JSON.stringify(defaultMap, undefined, 2), {
                force: false,
            });
            return defaultMap;
        }
    });
}
