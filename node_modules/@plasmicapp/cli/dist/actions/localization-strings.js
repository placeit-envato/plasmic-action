"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.localizationStrings = void 0;
const chalk_1 = __importDefault(require("chalk"));
const lodash_1 = require("lodash");
const api_1 = require("../api");
const deps_1 = require("../deps");
const lib_1 = require("../lib");
const auth_utils_1 = require("../utils/auth-utils");
const config_utils_1 = require("../utils/config-utils");
const file_utils_1 = require("../utils/file-utils");
const get_context_1 = require("../utils/get-context");
const user_utils_1 = require("../utils/user-utils");
function localizationStrings(opts) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        if (!opts.projects || opts.projects.length === 0) {
            throw new lib_1.HandledError(`Missing projects.`);
        }
        if (!opts.baseDir)
            opts.baseDir = process.cwd();
        const parsedProjectTokens = ((_a = opts.projectTokens) !== null && _a !== void 0 ? _a : []).map((val) => {
            const [projectId, projectApiToken] = val.split(":");
            if (!projectId || !projectApiToken) {
                throw new Error(`Invalid value passed to '--project-tokens': ${val}\nPlease provide the API tokens with the format PROJECT_ID:PROJECT_API_TOKEN`);
            }
            return {
                projectId: projectId.trim(),
                projectApiToken: projectApiToken.trim(),
            };
        });
        const output = !opts.output
            ? opts.format === "po"
                ? "data.po"
                : "data.json"
            : opts.output;
        const projectTokensFromConfig = [];
        const auth = yield auth_utils_1.getCurrentAuth(opts.auth);
        const maybeConfigFile = opts.config || config_utils_1.findConfigFile(opts.baseDir, { traverseParents: true });
        if (maybeConfigFile) {
            const context = yield get_context_1.getContext(opts, { enableSkipAuth: true });
            context.config.projects.forEach((p) => {
                projectTokensFromConfig.push(lodash_1.pick(p, "projectId", "projectApiToken"));
            });
        }
        const projectIdsAndTokens = [
            ...parsedProjectTokens,
            ...projectTokensFromConfig,
        ].filter((v) => !!v && !!v.projectId && !!v.projectApiToken);
        if (auth || projectIdsAndTokens.length > 0) {
            const api = new api_1.PlasmicApi(auth !== null && auth !== void 0 ? auth : {
                host: config_utils_1.DEFAULT_HOST,
                user: "",
                token: "",
            });
            deps_1.logger.info(`Generating localization strings for ${chalk_1.default.bold(opts.projects.join(", "))}...`);
            const data = yield api.genLocalizationStrings(opts.projects, opts.format, projectIdsAndTokens);
            if (file_utils_1.existsBuffered(output)) {
                const overwrite = yield user_utils_1.confirmWithUser(`File ${output} already exists. Do you want to overwrite?`, opts.forceOverwrite);
                if (!overwrite) {
                    throw new lib_1.HandledError(`Cannot write to ${output}; file already exists.`);
                }
            }
            file_utils_1.writeFileText(output, data);
            deps_1.logger.info(`Localization strings have been written to ${output}`);
        }
        else {
            deps_1.logger.error(`Missing auth information. You can follow any of the steps below to fix it:
- Run 'plasmic auth'
- Provide the project API token to 'plasmic.json'
- Or provide the project API token through '--project-tokens' flag`);
        }
    });
}
exports.localizationStrings = localizationStrings;
